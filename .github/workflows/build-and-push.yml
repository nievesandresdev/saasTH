name: Build and Push Hoster Image

on:
  push:
    branches: [ main, test ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set npm registry to public
        run: npm config set registry https://registry.npmjs.org/

      # Crear el archivo .env con las variables necesarias
      - name: Create .env file
        run: |
          echo "VUE_APP_I18N_LOCALE=${{ secrets.VUE_APP_I18N_LOCALE }}" >> .env
          echo "VUE_APP_I18N_FALLBACK_LOCALE=${{ secrets.VUE_APP_I18N_FALLBACK_LOCALE }}" >> .env
          echo "PUSHER_APP_ID=${{ secrets.PUSHER_APP_ID }}" >> .env
          echo "PUSHER_APP_KEY=${{ secrets.PUSHER_APP_KEY }}" >> .env
          echo "PUSHER_APP_SECRET=${{ secrets.PUSHER_APP_SECRET }}" >> .env
          echo "PUSHER_APP_CLUSTER=${{ secrets.PUSHER_APP_CLUSTER }}" >> .env
          echo "VUE_APP_PUSHER_APP_KEY=${{ secrets.PUSHER_APP_KEY }}" >> .env
          echo "VUE_APP_PUSHER_APP_CLUSTER=${{ secrets.PUSHER_APP_CLUSTER }}" >> .env
          echo "VUE_APP_KEY_GOOGE=${{ secrets.VUE_APP_KEY_GOOGE }}" >> .env
          if [ "${{ github.ref_name }}" == "main" ]; then
            echo "ADMIN_URL=${{ secrets.ADMIN_URL_MAIN }}" >> .env
            echo "VUE_APP_API_URL_BACKEND_GENERAL=${{ secrets.VUE_APP_API_URL_BACKEND_GENERAL_MAIN }}" >> .env
            echo "VUE_APP_STORAGE_URL=${{ secrets.VUE_APP_STORAGE_URL_MAIN }}" >> .env
            echo "VUE_APP_ENVIROMENT=${{ secrets.VUE_APP_ENVIROMENT_MAIN }}" >> .env
            echo "VUE_APP_X_KEY_API=${{ secrets.VUE_APP_X_KEY_API_MAIN }}" >> .env
            echo "VUE_APP_API_URL_BACKEND_HELPER=${{ secrets.VUE_APP_API_URL_BACKEND_HELPER_MAIN }}" >> .env
            echo "VUE_APP_GUEST_URL=${{ secrets.VUE_APP_GUEST_URL_MAIN }}" >> .env
            echo "VUE_APP_API_URL_REVIEW=${{ secrets.VUE_APP_API_URL_REVIEW_MAIN }}" >> .env
            echo "VUE_APP_X_KEY_REVIEW=${{ secrets.VUE_APP_X_KEY_REVIEW_MAIN }}" >> .env
            echo "VUE_APP_X_API=${{ secrets.VUE_APP_X_KEY_API_MAIN }}" >> .env
            echo "VUE_APP_REFERENT_URL=${{ secrets.REFERENT_URL_MAIN }}" >> .env
            echo "VUE_APP_LOGIN_DOSSIER_EMAIL=${{ secrets.VUE_APP_LOGIN_DOSSIER_EMAIL_MAIN }}" >> .env
            echo "VUE_APP_LOGIN_DOSSIER_PASSWORD=${{ secrets.VUE_APP_LOGIN_DOSSIER_PASSWORD_MAIN }}" >> .env
            echo "VUE_APP_DOSSIER_HOTEL_ID=${{ secrets.VUE_APP_DOSSIER_HOTEL_ID_MAIN }}" >> .env
            
          else
            echo "ADMIN_URL=${{ secrets.ADMIN_URL_TEST }}" >> .env
            echo "VUE_APP_API_URL_BACKEND_GENERAL=${{ secrets.VUE_APP_API_URL_BACKEND_GENERAL_TEST }}" >> .env
            echo "VUE_APP_STORAGE_URL=${{ secrets.VUE_APP_STORAGE_URL_TEST }}" >> .env
            echo "VUE_APP_ENVIROMENT=${{ secrets.VUE_APP_ENVIROMENT_TEST }}" >> .env
            echo "VUE_APP_X_KEY_API=${{ secrets.VUE_APP_X_KEY_API_TEST }}" >> .env
            echo "VUE_APP_API_URL_BACKEND_HELPER=${{ secrets.VUE_APP_API_URL_BACKEND_HELPER_TEST }}" >> .env
            echo "VUE_APP_GUEST_URL=${{ secrets.VUE_APP_GUEST_URL_TEST }}" >> .env
            echo "VUE_APP_API_URL_REVIEW=${{ secrets.VUE_APP_API_URL_REVIEW_TEST }}" >> .env
            echo "VUE_APP_X_KEY_REVIEW=${{ secrets.VUE_APP_X_KEY_REVIEW_TEST }}" >> .env
            echo "VUE_APP_REFERENT_URL=${{ secrets.REFERENT_URL_TEST }}" >> .env
            echo "VUE_APP_LOGIN_DOSSIER_EMAIL=${{ secrets.VUE_APP_LOGIN_DOSSIER_EMAIL_TEST }}" >> .env
            echo "VUE_APP_LOGIN_DOSSIER_PASSWORD=${{ secrets.VUE_APP_LOGIN_DOSSIER_PASSWORD_TEST }}" >> .env
            echo "VUE_APP_DOSSIER_HOTEL_ID=${{ secrets.VUE_APP_DOSSIER_HOTEL_ID_TEST }}" >> .env

          fi
          echo "VUE_APP_ADMIN_URL=${{ secrets.VUE_APP_ADMIN_URL }}" >> .env
          
      - name: Clean npm cache
        run: npm cache clean --force
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Determine image name based on branch
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "IMAGE_NAME=hoster" >> $GITHUB_ENV
          else
            echo "IMAGE_NAME=hoster-test" >> $GITHUB_ENV
          fi

      - name: Build image with docker compose
        run: docker compose build

      - name: Tag image (versioned)
        run: docker tag hoster:latest ghcr.io/th-the-hoster/${{ env.IMAGE_NAME }}:${{ github.run_number }}

      - name: Push versioned image to GHCR
        run: docker push ghcr.io/th-the-hoster/${{ env.IMAGE_NAME }}:${{ github.run_number }}

      

      # 1. Login a Azure
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 2. Seleccionar la suscripción de Azure
      - name: Set Azure subscription
        run: az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # 3. Configurar el registro privado (GHCR) en la Container App si no está configurado
      - name: Set GHCR Registry
        run: |
          if [ "${{ github.ref_name }}" == "main" ]; then
            az containerapp registry set \
              --resource-group th-test-resources \
              --name th-main-hoster \
              --server ghcr.io \
              --username ${{ secrets.GHCR_ACTOR }} \
              --password ${{ secrets.GHCR_PAT }}
          fi
          if [ "${{ github.ref_name }}" == "test" ]; then
            az containerapp registry set \
              --resource-group th-test-resources \
              --name th-test-hoster \
              --server ghcr.io \
              --username ${{ secrets.GHCR_ACTOR }} \
              --password ${{ secrets.GHCR_PAT }}
          fi

      # 4. Actualizar la Container App con la imagen versionada
      - name: Update Azure Container App image
        run: |
          if [ "${{ github.ref_name }}" == "main" ]; then
            az containerapp update \
              --name th-main-hoster \
              --resource-group th-test-resources \
              --image ghcr.io/th-the-hoster/${{ env.IMAGE_NAME }}:${{ github.run_number }}
          fi
          if [ "${{ github.ref_name }}" == "test" ]; then
            az containerapp update \
              --name th-test-hoster \
              --resource-group th-test-resources \
              --image ghcr.io/th-the-hoster/${{ env.IMAGE_NAME }}:${{ github.run_number }}
          fi